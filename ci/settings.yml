---
meta:
  name:    bigdata
  target:  sw
  url:     https://ci.starkandwayne.com

  initial_version: 0.1.0

  bosh-lite:
    target: https://10.58.111.49:25555
    username: (( vault "secret/bosh-lites/lite49/users/admin:username" ))
    password: (( vault "secret/bosh-lites/lite49/users/admin:password" ))
    cacert:   (( vault "secret/bosh-lites/lite49/certs:rootCA.pem" ))

  aws:
    access_key: (( vault "secret/aws/cfcommunity:access" ))
    secret_key: (( vault "secret/aws/cfcommunity:secret" ))

  github:
    owner:  cloudfoundry-community
    repo:   bigdata-boshrelease
    branch: master
    private_key:  (( vault "secret/pipelines/shared/github:private_key" ))
    access_token: (( vault "secret/pipelines/shared/github:access_token" ))

  slack:
    webhook: (( vault "secret/pipelines/bigdata-boshrelease/slack:webhook" ))
    channel: '#bigdata-boshrelease'
    username:      starkandwayne-ci
    icon:          https://cl.ly/0o401h3l1x3R/logo-50x50.png
    blob_success:  '(( concat "$BUILD_PIPELINE_NAME: New version of $BUILD_JOB_NAME was detected, and updated in master. <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME| Cut a new release?>" ))'
    blob_failure:  '(( concat "$BUILD_PIPELINE_NAME: :airplane_arriving: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to update the blob for $BUILD_JOB_NAME>" ))'

groups:
- name: blobs
  jobs:
  - cassandra
  - kafka
  - spark
  - zookeeper

jobs:
- name: cassandra
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: cassandra, trigger: true }
  - task: update-blob
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: cassandra
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    cassandra
        BLOB_NAME:   cassandra
        BLOB_BINARY: apache-cassandra*.tar.gz
        BLOB_URL:    https://archive.apache.org/dist/cassandra/
        BLOB_DESTINATION: cassandra/apache-cassandra-${VERSION}-bin.tar.gz
        BLOB_CLEANUP:     cassandra/apache-cassandra.*
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

- name: kafka
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: kafka, trigger: true }
  - task: update-blob
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: kafka
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    kafka
        BLOB_NAME:   kafka
        BLOB_BINARY: kafka*.tgz
        BLOB_URL:    https://github.com/kafka/kafka
        BLOB_DESTINATION: kafka/kafka_2.12-${VERSION}.0.tgz
        BLOB_CLEANUP:     kafka/kafka_2.*
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

- name: spark
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: spark, trigger: true }
  - task: update-blob
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: spark
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    spark
        BLOB_NAME:   spark
        BLOB_BINARY: spark*.tgz
        BLOB_URL:    https://archive.apache.org/dist/spark/
        BLOB_DESTINATION: spark/spark-${VERSION}-bin-hadoop2.7.tgz
        BLOB_CLEANUP:     spark/spark.*
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

- name: zookeeper
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: zookeeper, trigger: true }
  - task: update-blob
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: zookeeper
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    zookeeper
        BLOB_NAME:   zookeeper
        BLOB_BINARY: zookeeper*.tar.gz
        BLOB_URL:    https://archive.apache.org/dist/zookeeper/
        BLOB_DESTINATION: zookeeper/zookeeper-${VERSION}.tar.gz
        BLOB_CLEANUP:     zookeeper/zookeeper.*
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

resource_types:
- name: apache-directory-index
  type: docker-image
  source:
    repository: mastertinner/apache-directory-index-resource

resources:
  - name: cassandra
    type: apache-directory-index
    source:
      directory: https://archive.apache.org/dist/cassandra/
      folder_pattern: $VERSION
      file_pattern: apache-cassandra-$VERSION-bin.tar.gz
  - name: kafka
    type: apache-directory-index
    source:
      directory: https://archive.apache.org/dist/kafka/
      folder_pattern: $VERSION.0
      file_pattern: kafka_2.12-$VERSION.0.tgz
  - name: spark
    type: apache-directory-index
    source:
      directory: https://archive.apache.org/dist/spark/
      folder_pattern: spark-$VERSION
      file_pattern: spark-$VERSION-bin-hadoop2.7.tgz
  - name: zookeeper
    type: apache-directory-index
    source:
      directory: https://archive.apache.org/dist/zookeeper/
      folder_pattern: zookeeper-$VERSION
      file_pattern: zookeeper-$VERSION.tar.gz
